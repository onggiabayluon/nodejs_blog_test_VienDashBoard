<style>
   
 .placeholder {
    background-repeat: no-repeat;
    background-size: cover;
    background-image: url('http://localhost:3000/img/test.svg');
}
.intrinsic {

  display: block;
  position: relative;
  height: 0;
  width: 100%;
  
}
  .intrinsic.intrinsic--square {
    padding-top: 100%;
  }

  .intrinsic-item {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
   
    height: 100%;
    background-repeat: no-repeat;
    background-size: cover;
  }

</style>
{{#each chapter}}
    {{#each image}}

    <picture class="placeholder intrinsic intrinsic--square">
       
        <div data-bg="{{this.url}}" 
        class="intrinsic-item responsive border-0 card-img-left"></div>
    
    </picture>
    

    {{/each}}
{{/each}}

<script>
   

    /*-- Lazy loader Image --*/

    const targets = document.querySelectorAll('.intrinsic-item');
    const imgOptions = {
        threshhold: 1, // 1 laÃÄ toaÃÄn b√¥Ã£ b∆∞ÃÅc aÃÄnh
        rootMargin: "300px",
    }
    const clourdinary_name = 'dwajvm53v';
    const baseUrl = `https://res.cloudinary.com/${clourdinary_name}/image/fetch`
    var flag = 0;
    var finalSize = 0
    function querry(clientWidth) {
            if (flag == 0) {
                function setFlag() {
                   flag = 1
                };
                var mediaQueries = {
                    desktop: 1200,
                    tablets: 800,
                    phone: 400,
                };
                var clientWidthString = clientWidth
                if (clientWidthString >= mediaQueries.desktop) {
                    var size = mediaQueries.desktop  //  x >= 1200
                } else
                    if (clientWidthString >= mediaQueries.tablets && clientWidthString < mediaQueries.desktop) {
                        var size = mediaQueries.tablets //  x >= 800 x < 1200 
                    } else
                        if ((clientWidthString >= mediaQueries.phone && clientWidthString < mediaQueries.tablets) || clientWidthStringString < mediaQueries.phone) {
                            var size = mediaQueries.phone // ( x >= 400 x < 800 ) ||  x < 400
                        }
                        setFlag()
            }else if (flag == 1) {
                return 0
            }
            return parseInt(size) 
    
        }

    const lazyLoad = target => {
            const io = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    //console.log('üòç');
                    if (entry.isIntersecting) {
                        var img = new Image ();
                        img = entry.target; // Current Image
                        const src = img.getAttribute('data-bg');
                        
                        {
                           
                            const { clientWidth, clientHeight } = img
                            const pixelRatio = window.devicePixelRatio || 1.0
                            function setFinalSize() {
                                finalSize = finalSize + querry(clientWidth)
                            };
                            setFinalSize();
                            console.log(pixelRatio)
                            const imageParams = `w_${finalSize},h_${finalSize},q_auto,c_fill,f_auto`
                            //const imageParams = `w_${100 * Math.round(finalSize * pixelRatio / 100)},h_${100 * Math.round(finalSize * pixelRatio / 100)},q_auto,c_fill,f_auto`
                            //,g_auto nh√¢Ã£n di√™Ã£n ti√™u ƒëi√™Ãâm aÃânh
                            const url = `${baseUrl}/${imageParams}/${img.dataset.bg}`
                            img.style.backgroundImage = `url('${url}')`
                        }   
                        observer.disconnect();
                    }
                });
            }, imgOptions);

            io.observe(target)
        };

        targets.forEach(lazyLoad);
    /*-- End Lazy loader Image --*/
</script>